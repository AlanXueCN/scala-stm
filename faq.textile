---
layout: default
title: Frequently Asked Questions
---

p(faqq). *Q.* Can ScalaSTM run my existing code in parallel with no changes?

p(faqa). *A.* No.  You will need to replace shared variables with @Ref@-s.

p(faqq). *Q.* Why do you have both @Ref@ and @Ref.View@?

p(faqa). *A.* @Ref@ operations can only be called inside an @atomic@ block.  @Ref.View@ allows access to the underlying mutable cell both inside or outside a transaction.  We separated them so that you have to take an explicit step to bypass the safety of @atomic@.  The implicit @InTxn@ instance passed to @Ref@ methods also provides a small performance boost.

p(faqq). *Q.* Don't @Ref@-s and @Ref.View@-s result in a lot of wasted memory?

p(faqa). *A.* Underneath, a single instance can implement both @Ref@ and @Ref.View@.  If it is known when creating a @Ref@ that it holds a primitive value, then the returned instance can be specialized to the primitive type to avoid long-term boxing.  In the reference implementation a @Ref[Int]@ is 8 bytes larger than a boxed @Int@.

p(faqq). *Q.* I want to make a big array of primitive values, won't @Array[Ref[Int]]@ be too wasteful then?

p(faqa). *A.* Yes.  To address this we provide @TArray[A]@, which acts like an @Array[Ref[A]]@ but allows for more efficient storage.

p(faqq). *Q.* What's the difference between the ScalaSTM library, the ScalaSTM API and the ScalaSTM reference implementation?

p(faqa). *A.* The ScalaSTM API is the classes that appear in user code.  They are in @scala.concurrent.stm._@, and they don't change when plugging in a new implementation.  The reference implementation is the one used by default.  The ScalaSTM library is the JAR file, which includes both the API and the reference implementation.

p(faqq). *Q.* If two separately-compiled components of the system use ScalaSTM, can they call each other from inside an atomic block?

p(faqa). *A.* Yes.  The ScalaSTM implementation is selected at runtime (using the system property @scala.stm.impl@), so all components using ScalaSTM will be connected to the same implementation.

p(faqq). *Q.* How can you say "ScalaSTM guarantees _X_" when the underlying implementation is pluggable?

p(faqa). *A.* What we really mean is: "Any underlying implementation is required to guarantee the property _X_, unless it has been explicitly disabled by an implementation-specific customization mechanism."

p(faqq). *Q.* How is ScalaSTM related to Nathan Bronson's ["CCSTM":http://ppl.stanford.edu/ccstm]?

p(faqa). *A.* The ScalaSTM API borrows heavily from CCSTM's public interface, which was in turn inspired by Daniel Spiewak's STM.  The reference implementation included in ScalaSTM is an improved version of CCSTM's algorithm.

p(faqq). *Q.* How is ScalaSTM related to Peter Veentjer's ["Multiverse":http://multiverse.codehaus.org]?

p(faqa). *A.* A pluggable ScalaSTM implementation that uses Multiverse is planned.

p(faqq). *Q.* How do you handle I/O and native method calls from inside transactions?

p(faqa). *A.* We include a complete set of life-cycle handlers that can be used to perform manual cleanup, or to participate in a two-phase commit with other transactional resources.  There is no automatic support.

p(faqq). *Q.* Didn't Joe Duffy's "retrospective":http://www.bluebytesoftware.com/blog/2010/01/03/ABriefRetrospectiveOnTransactionalMemory.aspx on STM.NET say handlers were not sufficient?

p(faqa). *A.* ScalaSTM does not have the goal of running arbitrary existing code, which is where most of their problems arose.

p(faqq). *Q.* Strong atomicity was too slow for STM.NET even though they modified the JIT directly, how can you provide it as just a library?

p(faqa). *A.* Unlike STMs that add @atomic@ as a keyword in the language, ScalaSTM only provides transactional behavior for a subset of the heap (the values stored inside @Ref@-s).  The vast majority of loads and stores bypass ScalaSTM, keeping the overhead low.  Another way to think about this is that efficient strong atomicity requires the help of the type system, which we encode in the difference between @A@ and @Ref[A]@.

p(faqq). *Q.* Does ScalaSTM provide publication and privatization safety?

p(faqa). *A.* Yes.

p(faqq). *Q.* Does ScalaSTM allow write skew?

p(faqa). *A.* No, although pluggable implementations may allow it to be selectively enabled as an optimization.

p(faqq). *Q.* Will ScalaSTM work with Scala on .NET?

p(faqa). *A.* The ScalaSTM reference implementation uses classes from @java.util.concurrent.atomic@ in a few key places internally, but it should be straightforward to replace these with the CLR functionality exposed by @System::Threading::Interlocked@.  Because ScalaSTM does not do bytecode rewriting there will be no need for MSIL rewriting.

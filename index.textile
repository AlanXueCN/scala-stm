---
layout: default
title: Welcome
---

Welcome from the Scala STM ["Expert Group":expert_group.html].  We're working on a lightweight software transactional memory for Scala, inspired by the STMs in Haskell and Clojure.  Our target is inclusion in Scala's standard library for 2.9 or the next point-release after, but you can use our draft release today.  We'd like your ["feedback":http://groups.google.com/group/scala-stm-expert-group/].

ScalaSTM is a single JAR with no dependencies, and includes
* An API that supports multiple STM implementations
* A reference implementation based on CCSTM

ScalaSTM provides a mutable cell called a @Ref@.  If you build a shared data structure using immutable objects and @Ref@-s, then you can access it from multiple threads or actors.  No @synchronized@, no deadlocks or race conditions, and good scalability.  Included are concurrent sets and maps, and we also have an easier and safer replacement for @wait@ and @notifyAll@.

"Learn more...":intro.html

h2(#news).  News

* _2011 Jan 2_ -- ["0.3-SNAPHOT":snapshots.html]: Bug fixes (["#11":https://github.com/nbronson/scala-stm/issues/closed#issue/11], ["#12":https://github.com/nbronson/scala-stm/issues/closed#issue/12], ["#13":https://github.com/nbronson/scala-stm/issues/closed#issue/13])

*(major) _2010 Dec 27_ -- ScalaSTM version 0.2 ["released":releases.html], including
** Performance improvements and bug fixes
** Better @TSet@, @TMap@ and @TxnLocal@
** Transaction statistics

* _2010 Dec 16_ -- ["0.2-SNAPSHOT":snapshots.html]: Bug fix for while-committing handlers (["#3":https://github.com/nbronson/scala-stm/issues/closed#issue/3]).  @TxnLocal@ can now be read and written from while-preparing and while-committing handlers.

* _2010 Dec 8_ -- ["0.2-SNAPSHOT":snapshots.html]: Substantial performance improvements, especially for nested atomic blocks.  @TMap.View@ and @TSet.View@ are integrated with Scala collection class hierarchy.

*(major) _2010 Dec 6_ -- ScalaSTM version 0.1 released.  "Get it...":releases.html
